"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
from decouple import config # Ortam değişkenlerini okumak için 'config' fonksiyonunu içeri aktarıyoruz.

# Projenin temel dizinini (manage.py dosyasının bulunduğu 'backend' klasörünü) tanımlıyoruz.
# __file__: Bu 'settings.py' dosyasının yolu.
# .resolve(): Sembolik bağlantıları çözer.
# .parent.parent: 'project' klasöründen bir üst, 'backend' klasöründen bir üst dizine (yani 'backend' klasörüne) çıkar.
# Bu BASE_DIR, konteyner içinde '/code/backend' yoluna denk gelir.
BASE_DIR = Path(__file__).resolve().parent.parent


# Hızlı başlangıç geliştirme ayarları - üretim için uygun değildir.
# Daha fazla bilgi için: https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# GÜVENLİK UYARISI: Üretimde kullanılan gizli anahtarı gizli tutun!
# SECRET_KEY: Django'nun güvenlik amaçlı kullandığı gizli anahtardır.
# Bu değer, '.env' dosyanızdaki 'DJANGO_SECRET_KEY' ortam değişkeninden okunur.
SECRET_KEY = config('DJANGO_SECRET_KEY')

# DEBUG: Hata ayıklama modunu etkinleştirir veya devre dışı bırakır.
# Bu değer, '.env' dosyanızdaki 'DJANGO_DEBUG' ortam değişkeninden okunur.
# default=False: Eğer DJANGO_DEBUG ortam değişkeni tanımlı değilse varsayılan olarak False olur.
# cast=bool: Okunan değeri boolean (True/False) tipine dönüştürür.
# Üretim ortamında (production) kesinlikle 'False' olmalıdır!
DEBUG = config('DJANGO_DEBUG', default=False, cast=bool)

# ALLOWED_HOSTS: Django uygulamanızın istek kabul edeceği host (alan adı) listesi.
# Bu değer, '.env' veya dosyanızdaki 'DJANGO_ALLOWED_HOSTS' ortam değişkeninden okunur.
# Virgülle ayrılmış bir string olarak okunur ve daha sonra Python listesine dönüştürülür.
ALLOWED_HOSTS_STR = config('DJANGO_ALLOWED_HOSTS', default='')
if ALLOWED_HOSTS_STR:
    # Boşlukları temizleyerek liste oluştururuz.
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR.split(',')]
else:
    # DEBUG=False iken ALLOWED_HOSTS boş bırakılamaz. Üretimde hata verir.
    # Bu nedenle, eğer boş gelirse boş bir liste tanımlarız, ancak üretimde bu değişkenin ayarlandığından emin olmalıyız.
    ALLOWED_HOSTS = []


# Uygulama Tanımlaması (INSTALLED_APPS): Django projenizde etkin olan Django uygulamalarını listeler.
# Her bir string, bir Django uygulamasının yolunu belirtir.
INSTALLED_APPS = [
    'django.contrib.admin', # Django'nun yönetim paneli uygulaması.
    'django.contrib.auth', # Kullanıcı kimlik doğrulama sistemi.
    'django.contrib.contenttypes', # İçerik türleri çerçevesi (modellerle ilgili genel bilgiler).
    'django.contrib.sessions', # Oturum yönetimi.
    'django.contrib.messages', # Tek seferlik mesaj bildirimleri (örn: "Giriş başarılı" mesajları).
    'django.contrib.staticfiles', # Statik dosyaların (CSS, JS, resimler) yönetimi.
]

# MIDDLEWARE: Django'nun istek/yanıt işleme sürecinde çalışan bileşenlerdir.
# Her bir middleware, bir isteği almadan önce veya bir yanıtı göndermeden önce belirli işlemleri yapar.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # Güvenlikle ilgili ayarları uygular.
    'django.contrib.sessions.middleware.SessionMiddleware', # Oturumları işler.
    'django.middleware.common.CommonMiddleware', # Yaygın faydalı middleware'ler (örn: URL yönlendirmeleri).
    'django.middleware.csrf.CsrfViewMiddleware', # CSRF (Cross Site Request Forgery) saldırılarına karşı koruma sağlar.
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Kullanıcı kimlik doğrulamasını yapar.
    'django.contrib.messages.middleware.MessageMiddleware', # Mesaj çerçevesini etkinleştirir.
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # Clickjacking saldırılarına karşı koruma sağlar.
    # WhiteNoise middleware'i, statik dosyaları doğrudan WSGI sunucusu (örneğin Gunicorn) üzerinden sunmak için eklenir.
    # Bu sayede Nginx gibi ayrı bir sunucuya gerek kalmadan, production ortamında CSS/JS gibi dosyalar hızlı ve etkili şekilde servis edilir.
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

# ROOT_URLCONF: Projenizin ana URL yapılandırma dosyasının yolunu belirtir.
# Django, gelen istekleri yönlendirmek için bu dosyayı kullanır.
ROOT_URLCONF = 'project.urls'

# TEMPLATES: Django'nun template motoru ayarlarını tanımlar.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # Kullanılacak template motoru.
        'DIRS': [BASE_DIR / 'templates'], # Django'nun global template'leri arayacağı ek dizinler.
                                         # Eğer 'backend' klasörünüzde 'templates' adında bir klasörünüz varsa.
        'APP_DIRS': True, # Django'nun kurulu uygulamaların (INSTALLED_APPS) içindeki 'templates' klasörlerini
                          # otomatik olarak aramasını sağlar (örn: 'myapp/templates/').
        'OPTIONS': {
            'context_processors': [
                # Context işlemcileri, her bir template'e otomatik olarak ek bağlam (veri) sağlayan fonksiyonlardır.
                'django.template.context_processors.debug', # DEBUG=True iken hata ayıklama bilgilerini template'lere ekler.
                'django.template.context_processors.request', # Mevcut HTTP isteğini template bağlamına ekler.
                'django.contrib.auth.context_processors.auth', # Kimlik doğrulanmış kullanıcı bilgilerini template bağlamına ekler.
                'django.contrib.messages.context_processors.messages', # Mesajları (flash messages) template bağlamına ekler.
                                                                     # Admin paneli için kritik bir ayardır.
            ],
        },
    },
]

# WSGI_APPLICATION: Web sunucusunun (Gunicorn gibi) Django uygulamanızla etkileşime girmesi için kullanılan modül.
WSGI_APPLICATION = 'project.wsgi.application'


# Veritabanı Ayarları:
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# 'default': Uygulamanızın varsayılan olarak kullanacağı veritabanı bağlantısı.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Kullanılacak veritabanı motoru (PostgreSQL).
        'NAME': config('DB_NAME'), # Veritabanının adı, '.env' dosyasından okunur.
        'USER': config('DB_USER'), # Veritabanı kullanıcı adı, '.env' dosyasından okunur.
        'PASSWORD': config('DB_PASSWORD'), # Veritabanı parolası, '.env' dosyasından okunur.
        'HOST': config('DB_HOST', 'db'), # Veritabanı sunucusunun adresi.
                                         # 'db': Docker Compose ağındaki 'db' servisinin adıdır.
                                         # Eğer '.env'de yoksa 'db' varsayılan olarak kullanılır.
        'PORT': config('DB_PORT', '5432', cast=int), # Veritabanı port numarası.
                                                    # Eğer '.env'de yoksa '5432' varsayılan olarak kullanılır ve tamsayıya çevrilir.
    }
}


# Parola Doğrulama Ayarları:
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# Kullanıcı parolaları için geçerlilik kurallarını tanımlar.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Uluslararasılaştırma (i18n) Ayarları:
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# Uygulamanızın farklı diller ve bölgeler için ayarlarını yönetir.
LANGUAGE_CODE = 'en-us' # Uygulamanın varsayılan dili ve ülkesi.

TIME_ZONE = 'UTC' # Uygulamanın varsayılan zaman dilimi.

USE_I18N = True # Uluslararasılaştırmanın etkin olup olmadığını belirler.

USE_TZ = True # Zaman dilimi duyarlılığının etkin olup olmadığını belirler.


# Statik Dosyalar (CSS, JavaScript, Resimler) Ayarları:
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/' # Tarayıcının statik dosyalara erişmek için kullanacağı URL ön eki.

# Django'nun statik dosyaları arayacağı ek dizinler (uygulama dışındaki dosyalar için).
# Eğer projenizin ana dizininde 'static' adında global bir statik klasörünüz varsa buraya eklenir.
STATICFILES_DIRS = [BASE_DIR / 'static']

# 'collectstatic' komutuyla tüm statik dosyaların toplanacağı dizin (üretim ortamında kullanılır).
# Bu yol, Docker konteyneri içinde '/code/backend/staticfiles' yoluna denk gelir.
# 'production.yml' dosyasındaki volume bağlama noktasıyla uyumlu olmalıdır.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# DEFAULT_AUTO_FIELD: Otomatik artan birincil anahtar türünü belirtir.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Medya Dosyaları (Kullanıcı Yüklemeleri İçin) Ayarları:
# MEDIA_URL: Tarayıcının kullanıcı tarafından yüklenen medya dosyalarına erişmek için kullanacağı URL ön eki.
MEDIA_URL = '/media/'

# MEDIA_ROOT: Kullanıcı tarafından yüklenen medya dosyalarının sunucuda depolanacağı dizin.
# Bu yol, Docker konteyneri içinde '/code/backend/media' yoluna denk gelir.
# 'production.yml' dosyasındaki volume bağlama noktasıyla uyumlu olmalıdır.
MEDIA_ROOT = BASE_DIR / 'media'

# WhiteNoise'un sıkıştırma ve cache'leme özelliğini kullanabilmek için bu ayar yapılır.
# GZIP ve Brotli gibi sıkıştırmalarla CSS/JS dosyalarının boyutu küçültülerek daha hızlı yüklenmesi sağlanır.
# Ayrıca "hashed" (versiyonlanmış) dosya adları sayesinde tarayıcılar bu dosyaları önbelleğe alabilir (örnek: main.4fa3c9.css).
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'